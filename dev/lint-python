#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# expand alias for making virtualenv happy
shopt -s expand_aliases

VIRTUAL_ENV_DIR="build/venv"

SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
SPARK_ROOT_DIR="$(dirname "$SCRIPT_DIR")"
PATHS_TO_CHECK="./python/pyspark/ ./examples/src/main/python/ ./dev/sparktestsupport"
PATHS_TO_CHECK="$PATHS_TO_CHECK ./dev/run-tests.py ./python/run-tests.py ./dev/run-tests-jenkins.py"
PEP8_REPORT_PATH="$SPARK_ROOT_DIR/dev/pep8-report.txt"
PYLINT_REPORT_PATH="$SPARK_ROOT_DIR/dev/pylint-report.txt"
PYLINT_INSTALL_INFO="$SPARK_ROOT_DIR/dev/pylint-info.txt"
SPHINXBUILD=${SPHINXBUILD:=sphinx-build}
SPHINX_REPORT_PATH="$SPARK_ROOT_DIR/dev/sphinx-report.txt"
VIRTUALENV_EXEC="virtualenv"

# It is a good practice to upgrade pip to the latest version, however, sometimes it might break
# something. Let freeze this version here. We cannot put it into requirements.txt since the
# execution of this requirement files might depends on the pip version.
PIP_VERSION="8.1.2"

cd "$SPARK_ROOT_DIR"

DEBUG=false
if [[ $1 == "--debug" || $1 == "-d" ]]; then
    DEBUG=true
fi


if [[ ! -z $VIRTUAL_ENV ]]; then
    echo "We already are inside a virtual environment: $VIRTUAL_ENV. Using it"
else
    echo "Not inside a virtual environment. Jumping into one in: $VIRTUAL_ENV_DIR"
    $VIRTUALENV_EXEC $VIRTUAL_ENV_DIR || exit 1
    source $VIRTUAL_ENV_DIR/bin/activate
fi
echo "To activate this environment, use: 'source $SPARK_ROOT_DIR/$VIRTUAL_ENV_DIR/bin/activate'"

pip install --upgrade "pip==$PIP_VERSION"
echo "Installing developer requirements..."
pip install --upgrade -r dev/requirements.txt

# compileall: https://docs.python.org/2/library/compileall.html
python -B -m compileall -q -l $PATHS_TO_CHECK > "$PEP8_REPORT_PATH"
compile_status="${PIPESTATUS[0]}"


# Easy install pylint in /dev/pylint. To easy_install into a directory, the PYTHONPATH should
# be set to the directory.
# dev/pylint should be appended to the PATH variable as well.
# Jenkins by default installs the pylint3 version, so for now this just checks the code quality
# of python3.
export "PYTHONPATH=$SPARK_ROOT_DIR/dev/pylint"
export "PYLINT_HOME=$PYTHONPATH"
export "PATH=$PYTHONPATH:$PATH"

# There is no need to write this output to a file
#+ first, but we do so so that the check status can
#+ be output before the report, like with the
#+ scalastyle and RAT checks.
echo "Checking Pep8..."
pep8 --ignore=E402,E731,E241,W503,E226 --config=dev/tox.ini $PATHS_TO_CHECK >> "$PEP8_REPORT_PATH"
pep8_status="${PIPESTATUS[0]}"

if [ "$compile_status" -eq 0 -a "$pep8_status" -eq 0 ]; then
    lint_status=0
else
    lint_status=1
fi

if [ "$lint_status" -ne 0 ]; then
    echo "PEP8 checks failed."
    cat "$PEP8_REPORT_PATH"
    rm "$PEP8_REPORT_PATH"
    exit "$lint_status"
else
    echo "PEP8 checks passed."
    rm "$PEP8_REPORT_PATH"
fi

echo "Checking Pylint..."
for to_be_checked in "$PATHS_TO_CHECK"; do
    [ $DEBUG == true ] && echo ".. $to_be_checked"
    pylint --rcfile="$SPARK_ROOT_DIR/python/pylintrc" $to_be_checked >> "$PYLINT_REPORT_PATH"
done

if [ "${PIPESTATUS[0]}" -ne 0 ]; then
    lint_status=1
    echo "Pylint checks failed."
    cat "$PYLINT_REPORT_PATH"
else
    echo "Pylint checks passed."
fi

rm "$PYLINT_REPORT_PATH"

# Check that the documentation builds acceptably, skip check if sphinx is not installed.
if hash "$SPHINXBUILD" 2> /dev/null; then
  cd python/docs
  make clean
  # Treat warnings as errors so we stop correctly
  SPHINXOPTS="-a -W" make html &> "$SPHINX_REPORT_PATH" || lint_status=1
  if [ "$lint_status" -ne 0 ]; then
    echo "pydoc checks failed."
    cat "$SPHINX_REPORT_PATH"
    echo "re-running make html to print full warning list"
    make clean
    SPHINXOPTS="-a" make html
    rm "$SPHINX_REPORT_PATH"
    exit "$lint_status"
  else
    echo "pydoc checks passed."
    rm "$SPHINX_REPORT_PATH"
  fi
  cd ../..
else
  echo >&2 "The $SPHINXBUILD command was not found. Skipping pydoc checks for now"
fi
